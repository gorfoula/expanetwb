shiny::runApp()
runApp()
write.table("d3,"log.me")
write.table("d3","log.me")
shiny::runApp()
?write.table
runApp()
runApp()
runApp()
load("data/output/mydir.R")
load("data/output/score.R")
load("data/output/mydir.R")
load("data/output/mydir.R")
load("data/output/score.R")
View(d.score)
load("data/output/mydir.R")
load("data/output/mydir.R")
load("data/output/score.R")
load("data/output/score.R")
View(d.score)
load("data/output/mydir.R")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
or(TRUE,TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
substr("erwer",1,3)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
packageVersion("DT")
install.packages("DT")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("data/control.adj.4.RData")
View(control.adj)
rowsum(control.adj)
sum(control.adj)
?sum
?lapply
lapply(as.list, function=sum)
lapply(as.list(control.adj), function(x)=sum(x))
head(as.list(control.adj))
View(head(as.list(control.adj)))
View(head((control.adj)))
head(colSums(control.adj))
head(colSums(control.adj))
head(colSums(t(control.adj))
?)
head(colSums(t(control.adj)))
load("data/control.tm.5.RData")
head(colSums(control.tm))
head(colSums(t(control.tm)))
head(control.adj)
View((control.tm[1:10,1:10]))
View((control.adj[1:10,1:10]))
is.data.frame(control.tm)
head(colSums(as.data.frame(control.tm)))
head(rowSums(as.data.frame(control.tm)))
head(rowSums(as.data.frame(control.tm)))==1
as.double(rowSums(as.data.frame(control.tm)))
source("auxiliary_funcs.R")
valid.tm.table(control.tm)
valid.tm.table(rep(1,10,10))
valid.tm.table(rep(1,10,1))
rep(1,10,1)
rep(1,1,10)
valid.tm.table(rep(1,1,10))
rowSums(rep(1,1,10))
rowSums(rep(1,2,10))
rep(1,2,10)
rep(1,20,10)
?rep
rep(1:4,10)
rbind(c(0.5,0.2,0.3),c(0.5,0.8,0.7))
a=rbind(c(0.5,0.2,0.3),c(0.5,0.8,0.7))
rowSums(a)
a=t(a)
rowSums(a)
valid.tm.table(a)
source("auxiliary_funcs.R")
valid.tm.table(a)
a
source("auxiliary_funcs.R")
valid.tm.table(a)
valid.tm.table(control.tm)
shiny::runApp()
rbind(c("control_adj.txt","control_tm.txt"),c("T_adj.txt","T_tm.txt"))
runApp()
runApp()
runApp()
runApp()
runApp()
load.file("data/control_adj.txt")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
li(
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?/paste
?paste
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
v1=c(1,45,567,6)
b=paste("(size:",v1[3],"x",v1[4],")</p>",sep = "")
b
paste("<p id='paths'>(size:",v1[3],"x",v1[4],")</p>",sep = "")
HTML(b)
b
b=paste("<p id='paths'>(size:",v1[3],"x",v1[4],")</p>",sep = "")
HTML(b)
runApp()
runApp()
data.frame(matrix(nrow = 4,ncol = 2))
data.frame(matrix(nrow = 4,ncol = 2,""))
df=data.frame(matrix(nrow = 4,ncol = 2,""))
row.names(df)=c("a","b","c","d")
colnames(df)=c("Rows/Columns","Unique Genes")
df
df["a","Unique Genes"]
df["a","Unique Genes"]=456
df["a","Unique Genes"]="456"
df[1,1]=456
df[1,1]<456
df[1,1]<-456
df[1]
df[1]<-456
df
df["Unique Genes"][1]=45
df
df["Unique Genes"][1,1]=45
df
df["Unique Genes"][1]=47
df
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
typeof(b)
typeof(df)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
library(expanet)
library(expanet)
load("data/geneSets.RData")
#load("data/pbe_path.Rdata")
load('data/control.tm.5.RData')
runExpanet( treatment.label = 'control',
treatment.tm    = control.tm,
results.dir     = 'data/output/control',
gsc             = gse,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = "./expanet/Cexec/lkwalk"
)
runApp()
runApp()
runApp()
runApp()
runApp()
?shinyjs::toggleState
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderTable
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
