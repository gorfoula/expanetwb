library(expanet)
load("data/geneSets.RData")
load('data/control.tm.5.RData')
runExpanet( treatment.label = 'control',
treatment.tm    = control.tm,
results.dir     = 'data/output/control',
gsc             = gse,#$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = '/expanet/Cexec/lkwalk'
)
write.table(as.matrix(gse),"test.txt")
load('data/N.tm.5.RData')
runExpanet( treatment.label = 'N',
treatment.tm    = N.tm,
results.dir     = 'data/output/N',
gsc             = gse,#$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = '/expanet/Cexec/lkwalk'
)
load("data/N.adj.4.RData")
load("data/control.adj.4.RData")
indx=sample(1:nrow(control.adj),50)
analyzeExpanet( data.dir = 'data/output/',
control.label = 'control',
treatment.label = 'N',
control.adj = control.adj,
treatment.adj = N.adj,
gene.set = gse$kg.sets,
threshold = 0.0001,
build.graphs = TRUE,
save.results = TRUE
)
load("data/N.adj.4.RData")
load("data/control.adj.4.RData")
indx=sample(1:nrow(control.adj),50)
analyzeExpanet( data.dir = 'data/output/',
control.label = 'control',
treatment.label = 'N',
control.adj = control.adj,
treatment.adj = N.adj,
gene.set = gse,#$kg.sets,
threshold = 0.0001,
build.graphs = TRUE,
save.results = TRUE
)
View(gse)
load("data/geneSets.RData")
View(gse)
gse_new=gse
load("data/geneSets_old.RData")
View(gse)
View(gse_new)
View(names(gse)==names(gse_new))
gse_new==gse
gse_new==gse[[1]]
gse_new==names(gse)[1]
names(gse)[1]
names(gse)[2]
is.list(gse)
names(gse$kg.sets)
for (k in names(gse_new)) {
which(k==gse$kg.sets)
}
for (k in names(gse_new)) {
print(k)
print(which(k==gse$kg.sets))
}
for (k in names(gse_new)) {
print(k)
print(which(  (k==gse$kg.sets)==FALSE  ))
}
for (k in names(gse_new)) {
indx=which(  (k==gse$kg.sets)==TRUE  )
if(length(indx)<1){
print(k)
}
}
write.table(as.matrix(gse_new),"gse_new.txt")
write.table(as.matrix(gse$kg.sets),"gse_old.txt")
gse_new$pbe00010_Glycolysis_Gluconeogenesis
is.list(gse_new$pbe00010_Glycolysis_Gluconeogenesis)
is.vector(gse_new$pbe00010_Glycolysis_Gluconeogenesis)
load("data/pbe_path.Rdata")
library(expanet)
load('data/control.tm.5.RData')
runExpanet( treatment.label = 'control',
treatment.tm    = control.tm,
results.dir     = 'data/output/control',
gsc             = final.list,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = '/expanet/Cexec/lkwalk'
)
load('data/N.tm.5.RData')
runExpanet( treatment.label = 'N',
treatment.tm    = N.tm,
results.dir     = 'data/output/N',
gsc             = final.list,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = '/expanet/Cexec/lkwalk'
)
load("data/N.adj.4.RData")
load("data/control.adj.4.RData")
indx=sample(1:nrow(control.adj),50)
analyzeExpanet( data.dir = 'data/output/',
control.label = 'control',
treatment.label = 'N',
control.adj = control.adj,
treatment.adj = N.adj,
gene.set = final.list,# gse$kg.sets,
threshold = 0.0001,
build.graphs = TRUE,
save.results = TRUE
)
analyzeExpanet
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- read.delim("NtoIS_coexp.csv",
header = TRUE,
sep = ",",
quote = "")
dim(df)
View(df
)
nrow(df)
ncol(df)
head(colnames(df))
lenght(row.names(df))
length(row.names(df))
runApp()
runApp()
runApp()
?read.delim
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
c(FALSE,1,TRUE,67)
paste(c(12,44,5,6))
?paste
paste(c(12,44,5,6),collapse=",")
runApp()
runApp()
as.integer(TRUE)
c=("TRUE","FALSE")
a=c("TRUE","FALSE")
a
a[1:2]=="TRUE"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
2:2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load('data/control.tm.5.RData')
View(control.tm)
library(expanet)
#Expanet is executed in two discrete steps. At first the expansion of #each pathway of each treatment is happening
#using the runExpanet() function and then to analyse the results #based on the expanded pathways a second function is
#used called analyzeExpanet().
# @param treatment.label : Treatment's identification label [ string ]
# @param treatment.tm    : Treatment's transition matrix loaded object[ matrix ]
# @param resutls.dir     : Directory to store results [ string ]
# @param gsc             : List with Gene Set Collections  [ list ]
# @param l.of.walk       : The length of walk [ numeric ]
# @param verbose         : Either print or not results from lkwalk program [ logical ]
# @param n.cores         : Number of cores to be used [ numeric ]
# @param exeC            : C program execution path [ string ]
load("data/geneSets.RData")
load("data/pbe_path.Rdata")
load('data/control.tm.5.RData')
runExpanet( treatment.label = 'control',
treatment.tm    = control.tm,
results.dir     = 'data/output/control',
gsc             = final.list,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = 'D:/Dropbox/R_Projects/Expanet_web_portal/Expanet/expanet/Cexec/lkwalk'
)
runExpanet( treatment.label = 'control',
treatment.tm    = control.tm,
results.dir     = 'data/output/control',
gsc             = final.list,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = 'expanet/Cexec/lkwalk'
)
runExpanet( treatment.label = 'control',
treatment.tm    = control.tm,
results.dir     = 'data/output/control',
gsc             = final.list,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = './expanet/Cexec/lkwalk'
)
load('data/control.tm.5.RData')
runExpanet( treatment.label = 'control',
treatment.tm    = control.tm,
results.dir     = 'data/output/control',
gsc             = final.list,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = '\expanet\Cexec\lkwalk'
)
load('data/control.tm.5.RData')
runExpanet( treatment.label = 'control',
treatment.tm    = control.tm,
results.dir     = 'data\output\control',
gsc             = final.list,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = '\expanet\Cexec\lkwalk'
)
load('data/control.tm.5.RData')
runExpanet( treatment.label = 'control',
treatment.tm    = control.tm,
results.dir     = 'data/output/control',
gsc             = final.list,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = "/expanet/Cexec/lkwalk"
)
load('data/control.tm.5.RData')
runExpanet( treatment.label = 'control',
treatment.tm    = control.tm,
results.dir     = 'data/output/control',
gsc             = final.list,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = "\expanet\Cexec\lkwalk"
)
load('data/control.tm.5.RData')
runExpanet( treatment.label = 'control',
treatment.tm    = control.tm,
results.dir     = 'data/output/control',
gsc             = final.list,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = "\\expanet\\Cexec\\lkwalk"
)
?mad
library(expanet)
load("data/geneSets.RData")
load("data/pbe_path.Rdata")
load('data/control.tm.5.RData')
load('data/N.tm.5.RData')
runExpanet( treatment.label = 'N',
treatment.tm    = N.tm,
results.dir     = 'data/output/N',
gsc             = gse,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = "./expanet/Cexec/lkwalk"
)
load('data/N.tm.5.RData')
runExpanet( treatment.label = 'N',
treatment.tm    = N.tm,
results.dir     = 'data/output/N',
gsc             = gse,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = "./expanet/Cexec/lkwalk"
)
library(expanet)
load("data/N.adj.4.RData")
load("data/control.adj.4.RData")
indx=sample(1:nrow(control.adj),50)
analyzeExpanet( data.dir = 'data/output/',
control.label = 'control',
treatment.label = 'N',
control.adj = control.adj,
treatment.adj = N.adj,
gene.set = final.list,# gse$kg.sets,
threshold = 0.0001,
build.graphs = TRUE,
save.results = TRUE
)
read.csv("data/output/controlVSN/scorescsv",header = TRUE)
read.csv("data/output/controlVSN/scores.sv",header = TRUE)
read.csv("data/output/controlVSN/scores.csv",header = TRUE)
d<-read.csv("data/output/controlVSN/scores.csv",header = TRUE)
View(d)
which(d$V3>0)
load("data/N.adj.4.RData")
load("data/control.adj.4.RData")
indx=sample(1:nrow(control.adj),50)
analyzeExpanet( data.dir = 'data/output/',
control.label = 'control',
treatment.label = 'N',
control.adj = control.adj,
treatment.adj = N.adj,
gene.set = gse,# gse$kg.sets,
threshold = 0.0001,
build.graphs = TRUE,
save.results = TRUE
)
shiny::runApp()
install.packages("shinyashboard")
install.packages("shinydashboard")
install.packages("shinyjs")
runApp()
runApp()
runApp()
load('data/control.tm.5.RData')
load('data/control.tm.5.RData')
View(control.tm)
write.csv(control.tm,"control_tm.csv",quote = FALSE)
write.table(control.tm,"control_tm.txt",quote = FALSE,sep = "\t",row.names = TRUE,col.names = TRUE)
row.names(control.tm)
colnames(control.tm)
is.data.frame(control.tm)
is.matrix(control.tm)
row.names(control.tm)
load('data/N.tm.5.RData')
write.table(N.tm,"./data/N_tm.txt",quote = FALSE,sep = "\t",row.names = TRUE,col.names = TRUE)
load("data/N.adj.4.RData")
load("data/control.adj.4.RData")
write.table(N.adj,"./data/N_adj.txt",quote = FALSE,sep = "\t",row.names = TRUE,col.names = TRUE)
write.table(control.adj,"./data/control_adj.txt",quote = FALSE,sep = "\t",row.names = TRUE,col.names = TRUE)
runApp()
