lenght(row.names(df))
length(row.names(df))
runApp()
runApp()
runApp()
?read.delim
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
c(FALSE,1,TRUE,67)
paste(c(12,44,5,6))
?paste
paste(c(12,44,5,6),collapse=",")
runApp()
runApp()
as.integer(TRUE)
c=("TRUE","FALSE")
a=c("TRUE","FALSE")
a
a[1:2]=="TRUE"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
2:2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load('data/control.tm.5.RData')
View(control.tm)
library(expanet)
#Expanet is executed in two discrete steps. At first the expansion of #each pathway of each treatment is happening
#using the runExpanet() function and then to analyse the results #based on the expanded pathways a second function is
#used called analyzeExpanet().
# @param treatment.label : Treatment's identification label [ string ]
# @param treatment.tm    : Treatment's transition matrix loaded object[ matrix ]
# @param resutls.dir     : Directory to store results [ string ]
# @param gsc             : List with Gene Set Collections  [ list ]
# @param l.of.walk       : The length of walk [ numeric ]
# @param verbose         : Either print or not results from lkwalk program [ logical ]
# @param n.cores         : Number of cores to be used [ numeric ]
# @param exeC            : C program execution path [ string ]
load("data/geneSets.RData")
load("data/pbe_path.Rdata")
load('data/control.tm.5.RData')
runExpanet( treatment.label = 'control',
treatment.tm    = control.tm,
results.dir     = 'data/output/control',
gsc             = final.list,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = 'D:/Dropbox/R_Projects/Expanet_web_portal/Expanet/expanet/Cexec/lkwalk'
)
runExpanet( treatment.label = 'control',
treatment.tm    = control.tm,
results.dir     = 'data/output/control',
gsc             = final.list,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = 'expanet/Cexec/lkwalk'
)
runExpanet( treatment.label = 'control',
treatment.tm    = control.tm,
results.dir     = 'data/output/control',
gsc             = final.list,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = './expanet/Cexec/lkwalk'
)
load('data/control.tm.5.RData')
runExpanet( treatment.label = 'control',
treatment.tm    = control.tm,
results.dir     = 'data/output/control',
gsc             = final.list,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = '\expanet\Cexec\lkwalk'
)
load('data/control.tm.5.RData')
runExpanet( treatment.label = 'control',
treatment.tm    = control.tm,
results.dir     = 'data\output\control',
gsc             = final.list,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = '\expanet\Cexec\lkwalk'
)
load('data/control.tm.5.RData')
runExpanet( treatment.label = 'control',
treatment.tm    = control.tm,
results.dir     = 'data/output/control',
gsc             = final.list,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = "/expanet/Cexec/lkwalk"
)
load('data/control.tm.5.RData')
runExpanet( treatment.label = 'control',
treatment.tm    = control.tm,
results.dir     = 'data/output/control',
gsc             = final.list,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = "\expanet\Cexec\lkwalk"
)
load('data/control.tm.5.RData')
runExpanet( treatment.label = 'control',
treatment.tm    = control.tm,
results.dir     = 'data/output/control',
gsc             = final.list,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = "\\expanet\\Cexec\\lkwalk"
)
?mad
library(expanet)
load("data/geneSets.RData")
load("data/pbe_path.Rdata")
load('data/control.tm.5.RData')
load('data/N.tm.5.RData')
runExpanet( treatment.label = 'N',
treatment.tm    = N.tm,
results.dir     = 'data/output/N',
gsc             = gse,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = "./expanet/Cexec/lkwalk"
)
load('data/N.tm.5.RData')
runExpanet( treatment.label = 'N',
treatment.tm    = N.tm,
results.dir     = 'data/output/N',
gsc             = gse,# gse$kg.sets,
l.of.walk       = 50,
verbose         = FALSE,
n.cores         = 2,
exeC            = "./expanet/Cexec/lkwalk"
)
library(expanet)
load("data/N.adj.4.RData")
load("data/control.adj.4.RData")
indx=sample(1:nrow(control.adj),50)
analyzeExpanet( data.dir = 'data/output/',
control.label = 'control',
treatment.label = 'N',
control.adj = control.adj,
treatment.adj = N.adj,
gene.set = final.list,# gse$kg.sets,
threshold = 0.0001,
build.graphs = TRUE,
save.results = TRUE
)
read.csv("data/output/controlVSN/scorescsv",header = TRUE)
read.csv("data/output/controlVSN/scores.sv",header = TRUE)
read.csv("data/output/controlVSN/scores.csv",header = TRUE)
d<-read.csv("data/output/controlVSN/scores.csv",header = TRUE)
View(d)
which(d$V3>0)
load("data/N.adj.4.RData")
load("data/control.adj.4.RData")
indx=sample(1:nrow(control.adj),50)
analyzeExpanet( data.dir = 'data/output/',
control.label = 'control',
treatment.label = 'N',
control.adj = control.adj,
treatment.adj = N.adj,
gene.set = gse,# gse$kg.sets,
threshold = 0.0001,
build.graphs = TRUE,
save.results = TRUE
)
shiny::runApp()
install.packages("shinyashboard")
install.packages("shinydashboard")
install.packages("shinyjs")
runApp()
runApp()
runApp()
load('data/control.tm.5.RData')
load('data/control.tm.5.RData')
View(control.tm)
write.csv(control.tm,"control_tm.csv",quote = FALSE)
write.table(control.tm,"control_tm.txt",quote = FALSE,sep = "\t",row.names = TRUE,col.names = TRUE)
row.names(control.tm)
colnames(control.tm)
is.data.frame(control.tm)
is.matrix(control.tm)
row.names(control.tm)
load('data/N.tm.5.RData')
write.table(N.tm,"./data/N_tm.txt",quote = FALSE,sep = "\t",row.names = TRUE,col.names = TRUE)
load("data/N.adj.4.RData")
load("data/control.adj.4.RData")
write.table(N.adj,"./data/N_adj.txt",quote = FALSE,sep = "\t",row.names = TRUE,col.names = TRUE)
write.table(control.adj,"./data/control_adj.txt",quote = FALSE,sep = "\t",row.names = TRUE,col.names = TRUE)
runApp()
shiny::runApp()
runApp()
?selectInput
list(c("","hsa")
)
list("","hsa")
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
load("orgs_gene_sets/orgs.R")
orgs.sel
orgs.sel[,2]
orgs.sel[,1]
is.list(orgs.sel[,1])
as.list(orgs.sel[,1])
View(orgs.sel)
runApp()
orgs.sel[,2]=="fg"
orgs.sel[,2]=="hsa"
which(orgs.sel[,2]=="hsa")
which(orgs.sel[,1]=="hsa")
runApp()
runApp()
load("orgs_gene_sets/pbe.R")
View(gene.set)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tempfile("plot", fileext = c(".ps", ".pdf"))
tempdir()
tempdir()
tempfile("plot", fileext = c(".ps", ".pdf"))
tempdir()
?tempdir
tempdir()
dir.create(paste(tempdir(),"/C",sep = ))
dir.create(paste(tempdir(),"/C",sep = ""))
list.files(tempdir(),pattern = ".")
temp.folder
tempdir()
tempfile("plot", fileext = c(""))
tempfile("res", fileext = c(""))
tempfile("res", fileext = c(""))
strsplit(tempfile("res", fileext = c("")),split = "/")
strsplit(tempfile("res", fileext = c("")),split = "/")[3]
strsplit(tempfile("res", fileext = c("")),split = "/")[[1]][3]
strsplit(tempfile("res", fileext = c("")),split = "/")[[1]][4]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dir.create("/tmp/Rtmps36ia1/res716c3b43d18d/C")
dir.create("./tmp/Rtmps36ia1/res716c3b43d18d/C")
dir.create("tmp/Rtmps36ia1/res716c3b43d18d/C")
dir.create("C")
dir.create("data/output/res716c3b43d18d")
dir.create("data/output/res716c3b43d18d/C")
runApp()
runApp()
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dir.create
runApp()
runApp()
Sys.chmod("data/output/res716c67c18041", mode = "0777")
Sys.chmod("data/output/res716c67c18041", mode = "777")
?Sys.chmod
Sys.chmod("data/output/res716c67c18041", mode = "671")
Sys.chmod("data/output/res716c67c18041", mode = "111")
Sys.chmod("data/output/res716c67c18041", mode = "1117")
Sys.chmod("data/output/res716c67c18041", mode = "0777")
Sys.chmod("data/output/res716c67c18041", mode = "7777")
Sys.chmod("data/output/res716c67c18041",'775',F)
Sys.chmod("data/output/res716c67c18041",'777',F)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(promises)
library(future)
install.packages("future")
runApp()
runApp()
install.packages("promises")
install.packages("promises")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
install_github
install.packages("install_github")
install.packages("devtools")
library(devtools)
install_github("rstudio/shiny@async")
runApp()
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(future)
library("shiny")
runApp()
install.packages("dplyr")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
randu
dim(randu)
sample(1:400,1)
load("data/geneSets.RData")
#load("data/pbe_path.Rdata")
load('data/control.tm.5.RData')
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
list.files("data/output/resfd926bf4ed7/C",pattern = ".[.]norm$", full.names = TRUE)
list.files("data/output/resfd926bf4ed7/C",pattern = ".[.]E$", full.names = TRUE)
list.files("data/output/resfd935aacbe2/C",pattern = ".[.]E$", full.names = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a<-list()
a["t"]
a["t"]=7
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
load("data/output/res1cd8158e258f/status.R")
View(status)
View(status)
load("data/output/res1cd8158e258f/status.R")
View(status)
load("data/output/res1cd8158e258f/status.R")
View(status)
load("data/output/res1cd8158e258f/status.R")
View(status)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
tags$h3("[1] Analysis just started.")
a=tags$h3("[1] Analysis just started.")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
load("orgs_gene_sets/pbe.R")
runApp()
load("orgs_gene_sets/pbe.R")
View(gene.set)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
