#
# This is the server logic of a Shiny web application. You can run the 
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
# 
#    http://shiny.rstudio.com/
#
#library(shiny)
#source("auxiliary_funcs.R")

# Define server logic required to draw a histogram
shinyServer(function(input, output) {
  shinyjs::hide("submit.button")
  shinyjs::hide("status.button")
  shinyjs::hide("add.button1")
  shinyjs::hide("add.button2")
  #kegg.files <- list.files(path = "orgs_gene_sets", pattern = ".[.]R$", full.names = TRUE)
  ######## Reactive Values
  tables <- reactiveValues(C.adj = NULL,T.adj=NULL,C.tm = NULL,T.tm=NULL,paths=NULL)
  progressValue <- reactiveValues(one=0,two=0,three=0)
    ######### TABLE LOADING ##########
  data1<-eventReactive(input$file1,{
    # input$file1 will be NULL initially. After the user selects
    # and uploads a file, head of that data file by default,
    # or all rows if selected, will be shown.
    req(input$file1)
    df=load.file(input$file1$datapath)
    return(df)
  })
  data2<-eventReactive(input$file2,{
    # input$file1 will be NULL initially. After the user selects
    # and uploads a file, head of that data file by default,
    # or all rows if selected, will be shown.
    req(input$file2)
    df=load.file(input$file2$datapath)
    return(df)
  })
  ###### ORGANISM DROP DOWN #####
  load(paste(kegg.folder,"/orgs.R",sep = ""))
  output$choose.organism <- renderUI({
    selectInput("organism", "Organism", as.list(orgs.sel[,2]))
    
  })
  observeEvent(input$organism,{
    found=which(orgs.sel[,2]==input$organism)
    #print(orgs.sel[found,1])
    load(paste(kegg.folder,"/",orgs.sel[found,1],".R",sep = ""))
    tables$paths=gene.set
    output$num.paths<- renderText({
      paste(length(gene.set)," pathways loaded.",sep = "")
    })
  })
  ###### VALIDATE INPUT AT STEP 1
  observeEvent(data1(),{
    shinyjs::hide("add.button1")
    v1=valid.table(data1())
    c.msgs=c(paste("The table is not square. #Rows:",v1[3],
                   " #Columns: ",v1[4],".",sep = ""),
             paste("The table contains non numeric values at columns: ",
                   v1[5],".",sep = "")
             )
    if(v1[1]=="TRUE" & v1[2]=="TRUE"){
      showNotification(paste(Sys.time(),", [STEP1] Input looks ok!")
                       , duration = 10
                       ,type="message")
      shinyjs::show("add.button1")
    }else{
      c.msgs.string=paste(c.msgs[v1[1:2]=="FALSE"],
                                collapse=" ")
      showNotification(paste(Sys.time(),", [STEP1] ",c.msgs.string)
                       , duration = 15
                       ,type="error")
      shinyjs::hide("add.button1")
    }
  })
  ###### VALIDATE INPUT AT STEP 2
  observeEvent(data2(),{
    shinyjs::hide("add.button2")
    v1=valid.table(data2())
    c.msgs=c(paste("The table is not square. #Rows:",v1[3],
                   " #Columns: ",v1[4],".",sep = ""),
             paste("The table contains non numeric values at columns: ",
                   v1[5],".",sep = "")
    )
    if(v1[1]=="TRUE" & v1[2]=="TRUE"){
      showNotification(paste(Sys.time(),", [STEP2] Input looks ok!")
                       , duration = 10
                       ,type="message")
      shinyjs::show("add.button2")
    }else{
      c.msgs.string=paste(c.msgs[v1[1:2]=="FALSE"],
                          collapse=" ")
      showNotification(paste(Sys.time(),", [STEP2] ",c.msgs.string)
                       , duration = 15
                       ,type="error")
      shinyjs::hide("add.button2")
    }
  })
  ##### PROGRESS BARS #####
  output$progressOne <- renderUI({
    progressGroup(text = "Control experiment submission",
                  value = progressValue$one,
                  min = 0, max = 100, color = "aqua")
  })
  
  output$progressTwo <- renderUI({
    progressGroup(text = "Treatment experiment submission", 
                  value = progressValue$two,   
                  min = 0, max = 100, color = "red")
  })
  
  #output$progressThree <- renderUI({
  #  progressGroup(text = "Organism Selection",        
  #                value = progressValue$three, 
  #                min = 0, max = 100, color = "green")
  #})
  ####### STEP1:SUBMIT transition and adjacency tables
  observeEvent(input$add.button1,{
      
    if(input$matrix.step1=="A"){
      tables$C.adj=data1()
      txt="Adjacency"
    }else{
      tables$C.tm=data1()
      txt="Transition"
    }
    ####### Notify User
    showNotification(paste(Sys.time(),", [STEP1] ",txt
                           ," matrix successfully submitted")
                     , duration = 10
                     ,type="message")
    ###### Monitor submission level
    progressValue$one <- (1- ((is.null(tables$C.tm)+is.null(tables$C.adj))/2) )*100
  })
  ####### STEP2:SUBMIT transition and adjacency tables
  observeEvent(input$add.button2,{
    
    if(input$matrix.step2=="A"){
      tables$T.adj=data2()
      txt="Adjacency"
    }else{
      tables$T.tm=data2()
      txt="Transition"
    }
    ####### Notify User
    showNotification(paste(Sys.time(),", [STEP2] ",txt
                           ," matrix successfully submitted")
                     , duration = 10
                     ,type="message")
    ###### Monitor submission level
    progressValue$two <- (1- ((is.null(tables$T.tm)+is.null(tables$T.adj))/2) )*100
  })
  ####### JOB SUBMISSION #####
  
  observeEvent({progressValue$one
                progressValue$two},{
      if(progressValue$one==100 & progressValue$two==100){
        shinyjs::show("submit.button")
      }
    })
  expanet.filel <- reactiveVal()
  observeEvent(input$submit.button,{
    expanet.filel(NULL)
    shinyjs::show("status.button")
#    load("data/geneSets.RData")
#    load('data/control.tm.5.RData')
    C.tm=tables$C.tm
    C.adj=tables$C.adj
    T.tm=tables$T.tm
    T.adj=tables$T.adj
    lb=c(input$label1,input$label2)
    gse=tables$paths
    #run.expanet( control.tm,control.tm,control.tm,control.tm,gse,c("control","T")   )
    future(run.expanet(C.tm,T.tm,C.adj,T.adj,gse,lb)
           )%...>%   #this part is not actually working
      expanet.filel() %...!%  # Assign to data 
      (function(e) {
        expanet.filel(NULL)
        warning(e)
        session$close()
      })
    #
    # Hide the async operation from Shiny by not having the promise be
    # the last expression.
    NULL
  })
#  observeEvent(expanet.filel,{ ## NOT yet working
#    print(expanet.filel())
#  })
  ####### RESULTS Tab
  observeEvent(input$status.button,{
    output$controlProgress <- renderInfoBox({
      print(d1)
      norm.files <- list.files(d1, pattern = ".[.]E$", full.names = TRUE)
      infoBox(
        "Pathways Completed", length(norm.files), icon = icon("list"),
        color = "olive",width = 8
      )
    })
    load(st)
    output$statusmsg<- renderText({
      if(status$status==0){
        paste("At step: ",status$status," The control case is still running.",sep = "")
      }
      if(status$status==1){
        paste("At step: ",status$status," The control case is finished.The treatment case is running",sep = "")
      }
      if(status$status==2){
        paste("At step: ",status$status,"Network expantion is complete for both Control and Treatment. Now the networks are being analyzed.",sep = "")
      }
      if(status$status==3){
        paste("At step: ",status$status,"Expanet analysis is complete",sep = "")
      }
        
    })
    
  })
})
